{
	"fuzzy-finder": [
		{
			"type": "header",
			"text": {
				"type": "plain_text",
				"text": ":open_file_folder: Finding files in repositories"
			}
		},
		{
			"type": "divider"
		},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "Did you know GitHub has a fuzzy finder?  Press `t` in any repository to search for files by name.  Watch it in action in the GIF below and find out more <https://github.blog/2011-02-10-introducing-the-file-finder/|here>!"
			}
		},
		{
			"type": "image",
			"image_url": "https://i1.wp.com/user-images.githubusercontent.com/121322/78818953-5105be00-798a-11ea-9f48-5626b0f7cb58.gif",
			"alt_text": "Fuzzy file finder in action"
		}
	],
	"gfm-syntax-highlighting": [
		{
			"type": "header",
			"text": {
				"type": "plain_text",
				"text": ":memo: Syntax highlighting in Markdown"
			}
		},
		{
			"type": "divider"
		},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "GitHub-flavored markdown can highlight the syntax of most common languages.  Tell GitHub what language it is by using ` ```language ` in the block.  Here's an example using Ruby:"
			}
		},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "``` ```ruby\nrequire 'redcarpet'\nmarkdown = Redcarpet.new(\"Hello World!\")\nputs markdown.to_html\n``````"
			}
		},
		{
			"type": "image",
			"image_url": "https://docs.github.com/assets/images/help/writing/code-block-syntax-highlighting-rendered.png",
			"alt_text": "Markdown syntax highlighting"
		},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "We use <https://github.com/github/linguist|Linguist> to perform language detection and to select <https://github.com/github/linguist/blob/master/vendor/README.md|third-party grammars> for syntax highlighting. You can find out which keywords are valid in <https://github.com/github/linguist/blob/master/lib/linguist/languages.yml|the languages YAML file>."
			}
		}
	],
	"make-a-patch": [
		{
			"type": "header",
			"text": {
				"type": "plain_text",
				"text": ":information_source: Generate a patch from a pull request"
			}
		},
		{
			"type": "divider"
		},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "Adding `.patch` to the URL of your pull request generates the formatted patch file for all of its code.  Here's an example:\n\nPull request - https://github.com/jlord/patchwork/pull/2514\nPatch - https://github.com/jlord/patchwork/pull/2514.patch"
			}
		},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": ":question: Want to know more about how to generate and use patch files?  Check out the official git documentation linked below:\n\n<https://git-scm.com/docs/git-format-patch|Generating patch files>\n<https://git-scm.com/docs/git-apply|Applying patch files>"
			}
		},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": ":email: Here's a <https://nasamuffin.github.io/git/open-source/email/code-review/2019/05/22/how-i-learned-to-love-email-patches.html|great guide> to using an email-based workflow with git."
			}
		}
	], 
	"auto-close-issues": [
		{
			"type": "header",
			"text": {
				"type": "plain_text",
				"text": ":closed: Close an issue via pull request"
			}
		},
		{
			"type": "divider"
		},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "You can link a pull request to an issue by using a supported keyword in the pull request's description or in a commit message (please note that the pull request must be on the default branch).\n\n- `close` or `closes` or `closed`\n- `fix` or `fixes` or `fixed`\n- `resolve` or `resolves` or `resolved`\n\nIf you use a keyword to reference a pull request comment in another pull request, the pull requests will be linked. Merging the referencing pull request will also close the referenced pull request.\n\nThe syntax for closing keywords depends on whether the issue is in the same repository as the pull request.\n\n- Issue in the same repository `Closes #10` \n- Issue in a different repository `Fixes octo-org/octo-repo#100`\n- Multiple issues use full syntax for each issue `Resolves #10, resolves #123, resolves octo-org/octo-repo#100`\n\nOnly manually linked pull requests can be manually unlinked. To unlink an issue that you linked using a keyword, you must edit the pull request description to remove the keyword.\n\nYou can also use closing keywords in a commit message. The issue will be closed when you merge the commit into the default branch, but the pull request that contains the commit will not be listed as a linked pull request."
			}
		}
	],
	"git-blame": [
		{
			"type": "header",
			"text": {
				"type": "plain_text",
				"text": "Explore the history of a file with git blame"
			}
		},
		{
			"type": "divider"
		},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "Git blame is a funny name for a serious way to track changes to a file, line-by-line and see who is responsible for each change.  Click 'blame' in the top bar while viewing any file in the repository to open a detailed, line-by-line summary of who changed each line and when.  It also lists the name of the commit and you can explore the history of the file further by clicking 'history'."
			}
		},
		{
			"type": "image",
			"title": {
				"type": "plain_text",
				"text": "Blame button",
				"emoji": true
			},
			"image_url": "https://docs.github.com/assets/images/help/repository/blame-button.png",
			"alt_text": "blame button"
		},
		{
			"type": "image",
			"title": {
				"type": "plain_text",
				"text": "Blame view",
				"emoji": true
			},
			"image_url": "https://docs.github.com/assets/images/help/repository/git_blame.png",
			"alt_text": "blame view"
		}
	],
	"copy-raw-contents": [
		{
			"type": "header",
			"text": {
				"type": "plain_text",
				"text": "Easily copy the raw contents of a file"
			}
		},
		{
			"type": "divider"
		},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "Quickly copy the raw contents of any file in a repository to your computer's clipboard by clicking the button titled 'Copy raw contents' while viewing the file. \n\n No longer do you have to open the raw file, select everything, then copy and paste!  (but you can if you want)"
			}
		},
		{
			"type": "image",
			"image_url": "https://github.com/some-natalie/github-tips-action/blob/main/images/copy-raw-contents.png",
			"alt_text": "Copy raw contents button"
		}
	],
	"github-file-size-limits": [
		{
			"type": "header",
			"text": {
				"type": "plain_text",
				"text": "File size limits in GitHub"
			}
		},
		{
			"type": "divider"
		},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "By default, GitHub will warn you when any individual file in your repository is larger than 50 MB and will block pushes if any file exceeds 100 MB.  If you need to version control large files, there's a couple options you can use:\n\n1. Use `git-lfs` to store the large files in your repository.  Learn more <https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-git-large-file-storage|here>.\n\n2. Create a release instead, allowing you to distribute versioned binaries that correlate with the release.  Learn more <https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github#distributing-large-binaries|here>.\n\n3. Remove the large files from the repository.  Learn more <https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github#removing-files-from-a-repositorys-history|here>."
			}
		},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": ":information_source: If your team is using GitHub Enterprise Server (self-hosted), your enterprise administrator can change these limits.  More information <https://docs.github.com/en/enterprise-server/admin/guides/installation/setting-git-push-limits|here>."
			}
		}
	],
	"git-aliases": [
		{
			"type": "header",
			"text": {
				"type": "plain_text",
				"text": "Git aliases to simplify life"
			}
		},
		{
			"type": "divider"
		},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "Much like your favorite shell, git can use custom aliases to make your life simpler.  Here are a few that I have found that make life a little easier.\n\nSometimes it's too much to type out the entire word \"checkout\" or \"branch\" when you also have to type the name of the branch or any other arguments, so shortening things to type is quite welcome.\n\n```$ git config --global alias.co checkout\n$ git config --global alias.br branch\n$ git config --global alias.st status```"
			}
		},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "The usefulness of aliases doesn't end there, though, as you can also define functions that you think _should_ exist, like this one that unstages a file for you:\n\n```$ git config --global alias.undo 'reset HEAD~1 --mixed'```\n\n"
			}
		}
	],
	"profile-readme": [
		{
			"type": "header",
			"text": {
				"type": "plain_text",
				"text": "Profile Readmes"
			}
		},
		{
			"type": "divider"
		},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "Tell the world about yourself with a profile readme!  It's a special repository at `username/username` and the `README.md` in that repo will show up when anyone looks you up on GitHub.\n\nGitHub will display your profile README on your profile page if all of the following are true.\n- You've created a repository with a name that matches your GitHub username.\n- The repository is public.\n- The repository contains a file named README.md in its root.\n- The README.md file contains any content.\n\n<https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/managing-your-profile-readme|Documentation>\n\n<https://github.com/abhisheknaiidu/awesome-github-profile-readme|A curated list of awesome examples>"
			}
		}
	]
}