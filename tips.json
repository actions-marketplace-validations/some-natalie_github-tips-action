{
	"fuzzy-finder": [
		{
			"type": "header",
			"text": {
				"type": "plain_text",
				"text": ":open_file_folder: Finding Files in Repositories"
			}
		},
		{
			"type": "divider"
		},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "Did you know GitHub has a fuzzy finder?  Press `t` in any repository to search for files by name.  Watch it in action in the GIF below and find out more <https://github.blog/2011-02-10-introducing-the-file-finder/|here>!"
			}
		},
		{
			"type": "image",
			"image_url": "https://i1.wp.com/user-images.githubusercontent.com/121322/78818953-5105be00-798a-11ea-9f48-5626b0f7cb58.gif?ssl=1",
			"alt_text": "Fuzzy file finder in action"
		}
	],
	"gfm-syntax-highlighting": [
		{
			"type": "header",
			"text": {
				"type": "plain_text",
				"text": ":memo: Syntax highlighting in Markdown"
			}
		},
		{
			"type": "divider"
		},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "GitHub-flavored markdown can highlight the syntax of most common languages.  Tell GitHub what language it is by using ` ```language ` in the block.  Here's an example using Ruby:"
			}
		},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "``` ```ruby\nrequire 'redcarpet'\nmarkdown = Redcarpet.new(\"Hello World!\")\nputs markdown.to_html\n``````"
			}
		},
		{
			"type": "image",
			"image_url": "https://docs.github.com/assets/images/help/writing/code-block-syntax-highlighting-rendered.png",
			"alt_text": "Markdown syntax highlighting"
		},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "We use <https://github.com/github/linguist|Linguist> to perform language detection and to select <https://github.com/github/linguist/blob/master/vendor/README.md|third-party grammars> for syntax highlighting. You can find out which keywords are valid in <https://github.com/github/linguist/blob/master/lib/linguist/languages.yml|the languages YAML file>."
			}
		}
	],
	"make-a-patch": [
		{
			"type": "header",
			"text": {
				"type": "plain_text",
				"text": ":information_source: Generate a patch from a pull request"
			}
		},
		{
			"type": "divider"
		},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "Adding `.patch` to the URL of your pull request generates the formatted patch file for all of its code.  Here's an example:\n\nPull request - https://github.com/jlord/patchwork/pull/2514\nPatch - https://github.com/jlord/patchwork/pull/2514.patch"
			}
		},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": ":question: Want to know more about how to generate and use patch files?  Check out the official git documentation linked below:\n\n<https://git-scm.com/docs/git-format-patch|Generating patch files>\n<https://git-scm.com/docs/git-apply|Applying patch files>"
			}
		},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": ":email: Here's a <https://nasamuffin.github.io/git/open-source/email/code-review/2019/05/22/how-i-learned-to-love-email-patches.html|great guide> to using an email-based workflow with git."
			}
		}
	], 
	"auto-close-issues": [
		{
			"type": "header",
			"text": {
				"type": "plain_text",
				"text": ":closed: Close an issue via pull request"
			}
		},
		{
			"type": "divider"
		},
		{
			"type": "section",
			"text": {
				"type": "mrkdwn",
				"text": "You can link a pull request to an issue by using a supported keyword in the pull request's description or in a commit message (please note that the pull request must be on the default branch).\n\n- `close` or `closes` or `closed`\n- `fix` or `fixes` or `fixed`\n- `resolve` or `resolves` or `resolved`\n\nIf you use a keyword to reference a pull request comment in another pull request, the pull requests will be linked. Merging the referencing pull request will also close the referenced pull request.\n\nThe syntax for closing keywords depends on whether the issue is in the same repository as the pull request.\n\n- Issue in the same repository `Closes #10` \n- Issue in a different repository `Fixes octo-org/octo-repo#100`\n- Multiple issues use full syntax for each issue `Resolves #10, resolves #123, resolves octo-org/octo-repo#100`\n\nOnly manually linked pull requests can be manually unlinked. To unlink an issue that you linked using a keyword, you must edit the pull request description to remove the keyword.\n\nYou can also use closing keywords in a commit message. The issue will be closed when you merge the commit into the default branch, but the pull request that contains the commit will not be listed as a linked pull request."
			}
		}
	]
}